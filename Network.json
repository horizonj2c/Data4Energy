AWSTemplateFormatVersion: 2010-09-09
# This CloudFormation is used for Data4Business project. The AWS environnement is created in eu-west-1
Mappings:
 #  This is the Amazon Linux 2 AMI.  Adjust these values as needed, they can change a few times per year:
  AmazonLinuxAMI:
    eu-west-1:
      AMI: ami-06ce3edf0cff21f07    # Ireland 
Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 1
    Description:  How many Availability Zones do you wish to utilize?
Resources:
# VPCs for the project
  VPCDMZ:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPCDMZ
 # Public Subnet from VPCDMZ         
  SubnetDMZ:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCDMZ
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      CidrBlock: 10.0.1.0/24
      Tags:
        - 
          Key: Name
          Value: SubnetDMZ   
  SubnetDMZ2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCDMZ
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      CidrBlock: 10.0.2.0/24
      Tags:
        - 
          Key: Name
          Value: SubnetDMZ2   
 # Internet access for the VPC     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPCDMZ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCDMZ
      InternetGatewayId: !Ref InternetGateway
# NAT Gateway:
#  NATGateway:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt ElasticIPAddress.AllocationId
#      SubnetId: !Ref SubnetDMZ
#      Tags:
#      - 
#        Key: Name
#        Value: !Join ['NAT-', [!Ref "AWS::StackName"]]
#  ElasticIPAddress:
#   Type: AWS::EC2::EIP
#   Properties:
#     Domain: VPC
  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCDMZ
      Tags:
        - 
          Key: Name
          Value: PublicRouteTable
  # Public route table has direct routing to IGW:      
  PublicRoute:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  # Attach SubnetDMZ to PublicRouteTable,  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDMZ
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDMZ2
      RouteTableId: !Ref PublicRouteTable  
  # Security group for SubnetDMZ.  Ingress from internet IPs but TCP port 443 only:
  PublicSecurityGroupSubnetDMZ:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Enable internet access but ony on port 443
      VpcId: !Ref VPCDMZ
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCDMZ.CidrBlock
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCDMZ.CidrBlock
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
#Creation of all the elements of the VPCAPPS
# VPCAPPS
  VPCApps:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPCApps
# Private Subnet Data4EnergyAPP1          
  Data4EnergyAPP1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCApps
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      CidrBlock: 10.1.1.0/24
      Tags:
        - 
          Key: Name
          Value: Data4EnergyAPP1
  # Private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCApps
      Tags:
        - 
          Key: Name
          Value: PrivateRoute
  # Private route table routing to NAT Gateway
#  PrivateRoute1:            
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      # Route traffic through the NAT Gateway:
#      NatGatewayId: !Ref NATGateway
  # Attach the private subnets to private route tables: 
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Data4EnergyAPP1
      RouteTableId: !Ref PrivateRouteTable
  # Private security group 
  PrivateSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable communication inside the VPC
      VpcId: !Ref VPCApps
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCApps.CidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCApps.CidrBlock 
#Output section expected      
Outputs:
  PublicRoute:
    Description: PublicRoute of the base network
    Value: !Ref PublicRoute
    Export:
      Name: PublicRoute
  VPCDMZ:
    Description: VPC of the base network
    Value: !Ref VPCDMZ
    Export:
      Name: VPCDMZ
  VPCApps:
    Description: VPC of the base network
    Value: !Ref VPCApps
    Export:
      Name: VPCApps
  SubnetDMZ:
    Description: First Public Subnet
    Value: !Ref SubnetDMZ
    Export:
      Name: SubnetDMZ
  Data4EnergyAPP1:
    Description: First Private Subnet
    Value: !Ref Data4EnergyAPP1
    Export:
      Name: Data4EnergyAPP1
  PrivateSecurityGroup1:
    Description: SecurityGroup
    Value: !Ref PrivateSecurityGroup1
    Export:
      Name: PrivateSecurityGroup1
