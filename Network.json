AWSTemplateFormatVersion: 2010-09-09
# This CloudFormation is used for Data4Business project. The AWS environnement is created in eu-west-1
Mappings:
 #  This is the Amazon Linux 2 AMI.  Adjust these values as needed, they can change a few times per year:
  AmazonLinuxAMI:
    eu-west-1:
      AMI: ami-06ce3edf0cff21f07    # Ireland 
Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 1
    Description:  How many Availability Zones do you wish to utilize?
Resources:
# VPCs for the project
  VPCDMZ:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPCDMZ
 # Public Subnet from VPCDMZ         
  SubnetDMZ:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCDMZ
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      CidrBlock: 10.0.1.0/24
      Tags:
        - 
          Key: Name
          Value: SubnetDMZ         
 # Internet access for the VPC     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPCDMZ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCDMZ
      InternetGatewayId: !Ref InternetGateway
  # NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref SubnetDMZ
      Tags:
      - 
        Key: Name
        Value: !Join ['NAT-', [!Ref "AWS::StackName"]]
  ElasticIPAddress:
   Type: AWS::EC2::EIP
   Properties:
     Domain: VPC
  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCDMZ
      Tags:
        - 
          Key: Name
          Value: PublicRouteTable
  # Public route table has direct routing to IGW:      
  PublicRoute:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  # Attach SubnetDMZ to PublicRouteTable,  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetDMZ
      RouteTableId: !Ref PublicRouteTable
  # Security group for SubnetDMZ.  Ingress from internet IPs but TCP port 443 only:
  PublicSecurityGroupSubnetDMZ:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Enable internet access but ony on port 443
      VpcId: !Ref VPCDMZ
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCDMZ.CidrBlock
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt VPCDMZ.CidrBlock
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0











#Output section expected      
Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref MyVPC1
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  PublicSubnet1:
    Condition: BuildMyPrivateSubnet1
    Description: First Public Subnet
    Value: !Ref MyPublicSubnet1
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet" ]]
  PrivateSubnet1:
    Condition: BuildMyPrivateSubnet1
    Description: First Private Subnet
    Value: !Ref MyPrivateSubnet1
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet" ]]
