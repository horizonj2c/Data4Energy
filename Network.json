AWSTemplateFormatVersion: 2010-09-09
# This CloudFormation is used for Data4Business project. The AWS environnement is created in eu-west-1
Mappings:
 #  This is the Amazon Linux 2 AMI.  Adjust these values as needed, they can change a few times per year:
  AmazonLinuxAMI:
    eu-west-1:
      AMI: ami-06ce3edf0cff21f07    # Ireland 
Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 1
    Description:  How many Availability Zones do you wish to utilize?
Resources:
# VPCs for the project
  VPCDMZ:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPCDMZ
 # Public Subnet from VPCDMZ         
  SubnetDMZ:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCDMZ
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      CidrBlock: 10.0.1.0/24
      Tags:
        - 
          Key: Name
          Value: SubnetDMZ         
 # Internet access for the VPC     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPCDMZ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCDMZ
      InternetGatewayId: !Ref InternetGateway
  # NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref SubnetDMZ
      Tags:
      - 
        Key: Name
        Value: !Join ['NAT-', [!Ref "AWS::StackName"]]
  ElasticIPAddress:
   Type: AWS::EC2::EIP
   Condition: BuildMyPrivateSubnet1
   Properties:
     Domain: VPC
  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildMyPublicSubnet1
    Properties:
      VpcId: !Ref MyVPC1
      Tags:
        - 
          Key: Name
          Value: Public
  # Public route table has direct routing to IGW:      
  PublicRoute1:   
    Type: AWS::EC2::Route
    Condition: BuildMyPublicSubnet1
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  # Private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildMyPrivateSubnet1
    Properties:
      VpcId: !Ref MyVPC1
      Tags:
        - 
          Key: Name
          Value: Private
  # Private route table routing to NAT Gateway
  PrivateRoute1:            
    Type: AWS::EC2::Route
    Condition: BuildMyPrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  # Attach the public subnets to public route tables,  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildMyPrivateSubnet1
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  # Attach the private subnets to private route tables: 
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildMyPrivateSubnet1
    Properties:
      SubnetId: !Ref MyPrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  # Security group for Public subnet.  Ingress from internet IPs but TCP port 22 only:
  PublicSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildMyPublicSubnet1
    DependsOn: AttachGateway
    Properties:
 #     GroupName: !Join ['PublicSG-', [!Ref "AWS::StackName"]]
      GroupDescription: Enable internet access but ony on port 22
      VpcId: !Ref MyVPC1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt MyVPC1.CidrBlock
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt MyVPC1.CidrBlock
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
  PrivateSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildMyPrivateSubnet1
    Properties:
  #    GroupName: !Join ['PrivateSG-', [!Ref "AWS::StackName"]]
      GroupDescription: Enable communication inside the VPC
      VpcId: !Ref MyVPC1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt MyVPC1.CidrBlock
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !GetAtt MyVPC1.CidrBlock      
  PrivateInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateRoute1                           
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref "AWS::Region", AMI]  # lookup from AMI map
      InstanceType: t2.small                          
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !Ref MyPrivateSubnet1               
        AssociatePublicIpAddress: false                
        GroupSet: [!Ref PrivateSecurityGroup1]             # Plug in the security group
      SourceDestCheck: true 
      Tags:
      - 
        Key: Name
        Value: !Join ['PrivateInstance1-', [!Ref "AWS::StackName"]]
#Output section expected      
Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref MyVPC1
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  PublicSubnet1:
    Condition: BuildMyPrivateSubnet1
    Description: First Public Subnet
    Value: !Ref MyPublicSubnet1
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-PublicSubnet" ]]
  PrivateSubnet1:
    Condition: BuildMyPrivateSubnet1
    Description: First Private Subnet
    Value: !Ref MyPrivateSubnet1
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-PrivateSubnet" ]]
